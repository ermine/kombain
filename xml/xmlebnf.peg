# It parses XML EBNF
%{
open Kmb_grammar
open Kmb_input

let make_name l = make_name { l with lexeme = "xml_" ^ l.lexeme }
%}

grammar         <- spacing definition+ spacing endOfFile
definition      <- spacing l_number rule
rule            <- identifier defined_as expression
                   { fun (i, e) -> {i with lexeme = "xml_" ^ i.lexeme}, e }

expression      <- sequence (l_PIPE sequence)*   {make_alternates }
sequence        <- (!(l_number identifier defined_as) disjunction)+
                   { fun s -> make_sequence (s, None)}

disjunction     <- element '-' spacing element
                   { fun (e1, e2) -> Sequence (PredicateNOT e2, e1) }
                 / element

element         <- primary (l_STAR               { fun () v -> Star v }
                           / l_PLUS              { fun () v -> Plus v }
                           / l_QUESTION          { fun () v -> Opt v }
                           )?
                   { fun (el, repeat) -> 
                       match repeat with None -> el | Some f -> f el }

primary         <- identifier   { make_name }
                 / l_OPEN expression l_CLOSE
                 / l_literal 
                 / l_class 

# Lex

identifier      <- < [a-zA-Z]+ > spacing
l_number        <- spacing < '[' [0-9a-z]+ ']' > spacing
l_literal       <- ( ["] (!["] l_char)* ["]  spacing
                 / ['] (!['] l_char)* ['] spacing
                 / l_hex spacing{ fun c -> [c]} )
                  { make_literal }
l_class         <- "[^" (!"]" range)* "]" spacing
                   { fun v -> Sequence (PredicateNOT (make_class v), Any) }
                 / "["  (!"]" range)* "]" spacing     { make_class }
range           <- l_hex '-' l_hex             { fun (c1, c2) -> Range (c1, c2) }
                 / l_char '-' l_char           { fun (c1, c2) -> Range (c1, c2) }
                 / l_char                      { fun c -> Char c }
l_hex           <- '#x' < [0-9a-fA-F]+ >       { make_hex_char }
l_char          <- < . >                       { make_char }


defined_as      <- "::=" spacing
l_QUESTION        <- '?' spacing
l_PLUS          <- '+' spacing
l_STAR          <- '*' spacing
l_PIPE          <- '|' spacing
l_OPEN          <- '(' spacing
l_CLOSE         <- ')' spacing
spacing         <- [\r\n\t ]*
endOfFile       <- !.

