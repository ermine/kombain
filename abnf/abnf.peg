# RFC 5234  ABNF January 2008

# Operator precedence

# Rule name, prose_val, Terminal value
# Comment
# Value range
# Repetition
# Grouping, Optional
# Concatenation
# Alternative
###

%{
open Kmb_input
open Kmb_grammar
open Abnf_lib

%}


rulelist      <- ( rule (c_wsp / c_nl)* )+

rule          <- rulename defined_as elements c_nl
                 # continues if next line starts
                 #  with white space

rulename      <- < alpha (alpha / digit / "-")* >

defined_as    <- c_wsp* ( "="   { fun () -> Define }
                        / "=/" { fun () -> IncrAlt }
                        ) c_wsp*
                 # basic rules definition and incremental alternatives

elements      <- alternation c_wsp*

c_wsp         <- wsp / (c_nl wsp)

c_nl          <- comment / crlf / lf
                 # comment or newline

comment       <- ";" (wsp / vchar)* crlf

alternation   <- concatenation (c_wsp* "/" c_wsp* concatenation)*
                 { fun (c1, cs) -> Alternation (c1, cs) }

concatenation <- repetition (c_wsp+ repetition)*
                 { fun (r1, r2) -> Concatenation (r1, r2) }

repetition    <- repeat? element
                 { fun (r, e) -> match r with None -> e | Some r -> Repeat (r,e)}

repeat        <- digitS { fun d -> CountRepeat d }
               / < digit* > "*" < digit* >
               { fun (d1, d2) ->
                   let d1 = 
                     if d1.lexeme = "" then None
                     else Some (int_of_string d1.lexeme) in
                   let d2 = 
                     if d2.lexeme = "" then None
                     else Some (int_of_string d2.lexeme) in
                     RangeRepeat (d1, d2)
               }

element       <- rulename   { fun r -> Name r.lexeme }
               / group / option / char_val / num_val / prose_val

group         <- "(" c_wsp* alternation c_wsp* ")"

option        <- "[" c_wsp* alternation c_wsp* "]"
                 { fun a -> Option a }

char_val      <- dquote < ([\x20-\x21] / [\x23-\x7E])* > dquote
                 # quoted string of sp and vchar without dquote
                 { fun str -> Literal str.lexeme }

num_val       <- "%" (bin_val / dec_val / hex_val)

bin_val       <- "b" ( bitS "-"  bitS { fun (b1, b2) -> Class [Range (b1, b2)] }
                     / bitS ( "." bitS)* 
                       {fun (b1, bs) -> 
                            Class (List.map (fun c -> Char c) (b1 :: bs))}
                     )
                 # series of concatenated bit values or single ONEOF range

dec_val       <- "d" (digitS "-" digitS 
                      { fun (d1, d2) -> Class [Range (d1, d2)] }
                     / digitS ("." digitS)*   
                       { fun (d1, ds) -> 
                             Class (List.map (fun c -> Char c) (d1::ds)) }
                     )


hex_val       <- "x" (hexdigS "-" hexdigS     
                      { fun (h1, h2) -> Class [Range (h1, h2)] }
                     / hexdigS ("." hexdigS)*  
                       { fun (h1, hs) -> 
                             Class (List.map (fun c -> Char c) (h1::hs)) }
                     )

prose_val     <- "<" < ([\x20-\x3D] / [\x3F-\x7E])* > ">"
                 # bracketed string of sp and vchar without angles
                 # prose description, to be used as last resort
                 { fun p -> Prose p }


# Core Rules

alpha         <- [\x41-\x5A] / [\x61-\x7A]   
                 # A-Z / a-z

bitS          <- < bit+ > { fun bs -> int_of_string ("0b" ^ bs.lexeme) }
bit           <- "0" / "1"

char          <- [\x01-\x7F]
                 # any 7-bit US-ASCII character, excluding NUL

cr            <- [\x0D]
                 # carriage return

crlf          <- cr lf
                 # Internet standard newline

ctl           <- [\x00-\x1F] / [\x7F]
                 # controls

digitS        <- < digit+ > { fun ds -> int_of_string ds.lexeme }
digit         <- [\x30-\x39]
                 # 0-9

dquote        <- [\x22]
                 # " (Double Quote)

hexdigS       <- < hexdig+ > { fun h -> int_of_string ("0x" ^ h.lexeme) }
hexdig        <- digit / "A" / "B" / "C" / "D" / "E" / "F"

htab          <- [\x09]
                 # horizontal tab

lf            <- [\x0A]
                 # linefeed

lwsp          <- (wsp / crlf wsp)*
                 # Use of this linear-white-space rule
                 #  permits lines containing only white
                 #  space that are no longer legal in
                 #  mail headers and have caused
                 #  interoperability problems in other
                 #  contexts.
                 # Do not use when defining mail
                 #  headers and use with caution in
                 #  other contexts.

octet         <- [\x00-\xFF]
                 # 8 bits of data

sp            <- [\x20]

vchar         <- [\x21-\x7E]
                 # visible (printing) characters

wsp           <- sp / htab
                 # white space

