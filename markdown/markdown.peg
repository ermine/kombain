# Markdown PEG based on http://github.com/jgm/peg-markdown

%{
open Markdown_lib
open Kmb_input
%}

document            <- ((blankLine* block(0))* blankLine*) endOfFile

block(n)            <- blockQuote(n) / codehighlight(n) / verbatim(n) 
                     / reference(n) / list(n) / htmlblock(n) 
                     / horizontalRule(n) / heading(n) / para(n) / plain(n)

blockQuoteLine(n)   <- indent(n) nonIndentSpace '>' ' '? anyLine

blockQuote(n)       <- (blockQuoteLine(n)+ 
                       (indent(n) !blankLine anyLine )* blankLine*)+
                       { fun ls -> 
                           let str = 
                             String.concat "" (List.map (fun (s1, s2) -> 
                               String.concat "" (s1 @ s2)) ls) in 
                                 BlockQuote str }

# Github extension
codehighlight(n)    <- "```" < alphaNum+ >? blankLine
                       (!"```" anyLine)+
                       "```" blankLine*
                       { fun (name, lines) -> 
                           CodeHighlight ((match name with 
                               | None -> None 
                               | Some v -> Some v.lexeme), 
                             String.concat "" lines) }

verbatim(n)         <- (indent(succ(n)) !blankLine anyLine)+
                       ((indent(succ(n))? blankLine {fun () -> "\n" } )+ 
                       (indent(succ(n)) !blankLine anyLine)+
                        { fun (s1, s2) -> String.concat "" (s1 @ s2) })* 
                       blankLine*
                       { fun (i1, i2) ->
                         let v = String.concat "" (i1 @ i2) in
                           Verbatim v }

anyLine             <- < (!newLine .)* newLine? > { fun s -> s.lexeme }

reference(n)        <- indent(n) 
                       nonIndentSpace label(n) ':' spnl 
                       < (!spaceChar !newLine .)+ >
                       spnl title? blankLine*
                       { fun (l, ({lexeme}, t)) -> 
                           Reference (l, Src (lexeme, t)) }

horizontalRule(n)   <- indent(n) nonIndentSpace (('*' sp '*' sp '*' (sp '*')*)
                                 / ('-' sp '-' sp '-' (sp '-')*)
                                 / ('_' sp '_' sp '_' (sp '_')*))
                       newLine blankLine+
                       { fun _ -> HorizontalRule }

para(n)             <- indent(n) inline(n)+ newLine blankLine+
                       { fun inlines -> Para inlines }
plain(n)            <- indent(n) inline(n)+ blankLine?
                       { fun inlines -> Plain inlines }

inline(n)           <- strong(n) / emph(n) / code / endLine2(n)
                     / spaces / link(n) / image(n)
                     / autoLink / rawHTML(n) / str / entity / special 

spaces              <- spaceChar+ { fun () -> Space }

strong(n)           <- (strongStar(n) / strongUl(n))
                       { fun inlines -> Strong inlines }

strongStar(n)       <- twoStar !' ' !newLine (!(spnl twoStar) inline(n))+ twoStar
strongUl(n)         <- twoUl !' ' !newLine (!(spnl twoUl) inline(n))+ twoUl 
                       !alphaNum
  
emph(n)             <- (emphStar(n) / emphUl(n))
                       { fun inlines -> Emph inlines }
emphStar(n)         <- oneStar !' ' !newLine 
                          (strong(n) / !(spnl oneStar) inline(n))+ oneStar
emphUl(n)           <- oneUl !' ' !newLine 
                       (strong(n) / !(spnl oneUl) inline(n))+ oneUl
                       !alphaNum 

code                <- ticks@('`'+) < ((!'`' .)+ / !ticks '`'+)+ > ticks 
                       { fun {lexeme} -> Code lexeme }

str                 <- < normalChar+ >  { fun {lexeme} -> Text lexeme }

special             <- < specialChar >          { fun {lexeme} -> Text lexeme }

link(n)             <- explicitLink(n) / referenceLink(n)
image(n)            <- '!' link(n)  { fun (Link (x, y)) -> Image (x, y) }
autoLink            <- autoLinkURL / autoLinkEmail

referenceLink(n)    <- label(n) < spnl > label(n) 
                       { fun (l1,({lexeme}, l2)) -> Link (l2, Ref (l2, lexeme)) }
                     / label(n)  { fun l -> Link (l, Nothing) }

label(n)        <- '[' (!']' inline(n))* ']'
title           <- ('"' < (!('\"' sp (")" / newLine)) !newLine .)* > '"'
                 / '\'' < (!('\'' sp (")" / newLine)) !newLine .)* > '\'')
                 { fun {lexeme} -> lexeme }

source          <- ('<' < source' > '>' / < source' >) { fun {lexeme} -> lexeme }
source'         <- ((![()> \n\t] .)+ / "(" source' ")" / "<" source' ">")*


sourceAndTitle  <- '(' sp source spnl title? sp ')'

explicitLink(n) <- label(n) spnl sourceAndTitle
                  { fun (l, (src, title)) -> Link (l, Src (src, title)) }

autoLinkURL     <- '<' < alpha+ "://" (!newLine !'>' .)+ > '>' 
                   { fun {lexeme} -> Link ([Text lexeme], Src (lexeme, None)) }

autoLinkEmail       <- '<' < alpha+ "@" (!newLine !'>' .)+ > '>'
                       { fun {lexeme} -> 
                           Link ([Text lexeme], Src (("mailto:" ^ lexeme), None))
                       }

htmlBlockTagName    <- "address" / "blockquote" / "center" / "dir" / "div" 
                     / "dl" / "fieldset" / "form" / "h1" / "h2" / "h3" / "h4" 
                     / "h5" / "h6" / "hr" / "isindex" / "menu" / "noframes"
                     / "noscript" / "ol" / "p" / "pre" / "table" / "ul"
                     / "dd" / "dt" / "frameset" / "li" / "tbody" / "td" 
                     /  "tfoot" / "th" / "thead" / "tr" / "script"

htmlBlockTag        <- "<" spnl < htmlBlockTagName > spnl htmlAttribute* ">"
                       { fun (name, attrs) -> (name.lexeme, attrs) }

htmlblock(n)        <- indent(n) nonIndentSpace htmlBlock'(n) blankLine+
htmlInternal(n)     <- " "* htmlBlock'(n) blankLine? { fun x -> x }
htmlBlock'(n)       <- htmlBlockTag
                         ( blankLine ( blankLine+ (!(" "* htmlEndTag) block(n))+
                                     / htmlInternal(n)+)
                         / (!(" "* htmlEndTag) inline(n))+ 
                           { fun i -> [Plain i] })
                       " "* htmlEndTag
                       { fun ((name1, attrs), (child, name2)) ->
                           if name1=name2 then HtmlBlock (name1, attrs, child)
                           else failwith "html end tag does not match"
                       }
                     / "<" spnl <alpha+> spnl htmlAttribute* spnl "/"? ">"
                       { fun (n, attrs) -> HtmlBlock (n.lexeme, attrs, []) }

rawHTML(n)          <- htmlComment
                     / htmlTag (!htmlEndTag inline(n))* htmlEndTag
                       { fun ((name1, attrs), (childs, name2)) ->
                         if name1 = name2 then Html (name1, attrs, childs)
                         else failwith "error"
                       }
                     / "<" spnl < alpha+ > spnl htmlAttribute* "/"? ">"
                       { fun (n, attrs) -> Html (n.lexeme, attrs, []) }
                     / htmlEndTag 
                       { fun name -> failwith ("Unexpected close tag " ^ name) }

htmlComment         <- "<!--" < (!"-->" .)* > "-->" 
                       { fun s -> HtmlComment s.lexeme }

htmlTag             <- "<" spnl < alphaNum+ > spnl htmlAttribute* ">"
                       { fun (name, attrs) -> (name.lexeme, attrs) }

htmlEndTag          <- "<" spnl "/" < alpha+ > spnl ">" 
                       { fun name -> name.lexeme }

htmlAttribute       <- < alphaNum+ > spnl ("=" spnl 
                            ( quoted 
                            / < (![ >] .)+ > { fun s -> s.lexeme }))? spnl
                       { fun (k,v) -> (k.lexeme, v) }

quoted              <- (["] < (!'\"' .)* > ["] 
                     / ['] < (!'\'' .)* > [']) { fun {lexeme} -> lexeme }


heading(n)          <-  (atxHeading(n) / setextHeading(n)) blankLine*

atxHeading(n)       <- indent(n)
                       < "######" / "#####" / "####" / "###" / "##" / "#" >
                       (!endLine !'#'  inline(n))+ '#'* newLine
                       { fun ({lexeme}, inlines) -> 
                           Heading (String.length lexeme, inlines) }

setextHeading(n)    <- indent(n) (!endLine inline(n))+ newLine ("==="  "="* 
                                             { fun () -> 1 } 
                                             / "---" "-"* { fun () -> 2 }
                                             ) newLine
                       { fun (inlines, level) -> Heading (level, inlines) }

list(n)             <- bulletList(n) / orderedList(n)

bullet              <- nonIndentSpace [+*\-] spaceChar+
bulletList(n)       <- bulletListItem(n)+ { fun l -> BulletList l }
enumerator          <- nonIndentSpace digit+ '.' spaceChar+
orderedList(n)      <- orderedListItem(n)+ { fun l -> OrderedList l }

bulletListItem(n)   <- indent(n) !horizontalRule(n)
                       bullet listBlock(n) listContinuationBlock(succ(n))*
                       { fun (s1, s2) -> s1 :: List.concat s2 }

orderedListItem(n)  <- indent(n) 
                       enumerator listBlock(n) listContinuationBlock(succ(n))*
                       { fun (s1, s2) -> s1 :: List.concat s2 }

listBlock(n)        <- (!(newLine indent(succ(n)) (bullet / enumerator)) 
                       inline(succ(n)))+ blankLine
                       { fun i -> Plain i }

listContinuationBlock(n) <- blankLine* block(n)+

# Lexical syntax

blankLine           <- sp newLine
endOfFile           <- !.
newLine             <- '\r'? '\n'
space               <- [ \t]
sp                  <- space*
spnl                <- sp (newLine sp)?

indent1             <- '\t' / "    "
indent(n)           <- repeat(n, indent1)

nonIndentSpace      <- ("   " / "  " / " ")?
twoStar             <- '**' !'**'
twoUl               <- '__' !'__'
oneStar             <- '*' !'*'
oneUl               <- '_' !'_'

alpha               <- [a-zA-Z]
alphaNum            <- alpha / digit
escapedChar         <- '\\' .
specialChar         <- [*_`&\[\]<!\\]
normalChar          <- escapedChar / !(specialChar / ' ' / newLine) .
endLine             <- ' '? newLine !blankLine !endOfFile { fun () -> Space }
endLine2(n)         <- ' '? newLine indent(n) !indent(1) !blankLine !endOfFile 
                       { fun () -> Space }

entity              <- '&'  < '#' ('x' / 'X') hexDigit+ 
                            / '#' digit+ 
                            / alphaNum+ > ';' { fun {lexeme} -> Entity lexeme }
digit               <- [0-9]
hexDigit            <- [0-9a-fA-F]
spaceChar       <- ' '
