# Markdown PEG based on http://github.com/jgm/peg-markdown

%{
open Markdown_lib
open Kmb_input
%}

document        <- ((blankLine* block)* blankLine*) endOfFile


block           <- blockQuote / verbatim / reference / htmlBlock 
                 / heading / list / horizontalRule / para / plain

blockQuoteLine  <- nonIndentSpace '>' ' '? < anyLine > { fun {lexeme} -> lexeme }

blockQuote      <- (blockQuoteLine+ (!blankLine < anyLine > )* blankLine*)+
                   { make_blackquote }

verbatim        <- (!blankLine indentedLine)+
                   ((indent? blankLine {fun () -> "\n" } )+ 
                   (!blankLine indentedLine)+
                   { fun (s1, s2) -> List.concat [s1;s2] })* blankLine*
                   { fun (i1, i2) ->
                       Verbatim (String.concat "" 
                                ((List.concat [i1; List.concat i2])))}

indentedLine    <- indent < anyLine > { fun {lexeme} -> lexeme }
anyLine         <- (!newLine .)* newLine?

reference       <- nonIndentSpace label ':' spnl < (!spaceChar !newLine .)+ >
                   spnl title? blankLine*
                   { fun (l, ({lexeme}, t)) -> Reference (l, Src (lexeme, t)) }

horizontalRule  <- nonIndentSpace (('*' sp '*' sp '*' (sp '*')*)
                                 / ('-' sp '-' sp '-' (sp '-')*)
                                 / ('_' sp '_' sp '_' (sp '_')*))
                   newLine blankLine+ # the + causes problems at the end of file
                   { fun _ -> HorizontalRule }

para            <- inline+ newLine blankLine+ 
                   { fun inlines -> Para inlines }
plain           <- inline+ blankLine?         { fun inlines -> Plain inlines }

blankLine       <- sp newLine

inline          <- strong / emph / code / endLine2 / spaces / link / image 
                 / autoLink / rawHTML / str / entity / special 

spaces          <- spaceChar+ { fun () -> Space }

strong           <- (strongStar / strongUl)     { fun inlines -> Strong inlines }

strongStar       <- twoStar !' ' !newLine (!(spnl twoStar) inline)+ twoStar
strongUl         <- twoUl !' '  !newLine (!(spnl twoUl) inline)+ twoUl !alphaNum
  
emph            <- (emphStar / emphUl)          { fun inlines -> Emph inlines }
emphStar        <- oneStar !' ' !newLine 
                          (strong / !(spnl oneStar) inline)+ oneStar
emphUl          <- oneUl !' ' !newLine (strong / !(spnl oneUl) inline)+ oneUl
                    !alphaNum 

code            <- ticks@('`'+) < ((!'`' .)+ / !ticks '`'+)+ > ticks 
                   { fun {lexeme} -> Code lexeme }

str             <- < normalChar+ >  { fun {lexeme} -> Text lexeme }

special         <- < specialChar >          { fun {lexeme} -> Text lexeme }

link            <- explicitLink / referenceLink
image           <- '!' link  { fun (Link (x, y)) -> Image (x, y) }
autoLink        <- autoLinkURL / autoLinkEmail

referenceLink   <- label < spnl > label 
                   { fun (l1, ({lexeme}, l2)) -> Link (l2, Ref (l2, lexeme)) }
                 / label  { fun l -> Link (l, Nothing) }

label           <- '[' (!']' inline)* ']'
title           <- ('"' < (!('\"' sp (")" / newLine)) !newLine .)* > '"'
                 / '\'' < (!('\'' sp (")" / newLine)) !newLine .)* > '\'')
                 { fun {lexeme} -> lexeme }

source          <- ('<' < source' > '>' / < source' >) { fun {lexeme} -> lexeme }
source'         <- ((![()> \n\t] .)+ / "(" source' ")" / "<" source' ">")*


sourceAndTitle  <- '(' sp source spnl title? sp ')'

explicitLink    <- label spnl sourceAndTitle
                  { fun (l, (src, title)) -> Link (l, Src (src, title)) }

autoLinkURL     <- '<' < alpha+ "://" (!newLine !'>' .)+ > '>' 
                   { fun {lexeme} -> Link ([Text lexeme], Src (lexeme, None)) }

autoLinkEmail   <- '<' < alpha+ "@" (!newLine !'>' .)+ > '>'
                { fun {lexeme} -> 
                    Link ([Text lexeme], Src (("mailto:" ^ lexeme), None)) }

rawHTML         <- (< htmlComment / htmlTag >)  { fun {lexeme} -> Html lexeme }

htmlComment     <- "<!--" (!"-->" .)* "-->"
htmlTag         <- "<" spnl "/"? alphaNum+ spnl htmlAttribute* "/"? ">"
htmlAttribute   <- alphaNum+ spnl ("=" spnl (quoted / (!spaces .)+))? spnl
quoted          <- ["] (!'\"' .)* ["] / ['] (!'\'' .)* [']


htmlBlockTag    <- "address" / "blockquote" / "center" / "dir" / "div" 
                 / "dl" / "fieldset" / "form" / "h1" / "h2" / "h3" / "h4" 
                 / "h5" / "h6" / "hr" / "isindex" / "menu" / "noframes" 
                 / "noscript" / "ol" / "p" / "pre" / "table" / "ul" / "dd" 
                 / "dt" / "frameset" / "li" / "tbody" / "td" / "tfoot" / "th" 
                 / "thead" / "tr" / "script"

htmlBlockAny    <- '<' spnl '/' htmlBlockTag '>'

htmlBlock       <- < nonIndentSpace (htmlComment / htmlBlockAny) >
                   { fun {lexeme} -> HTMLBlock lexeme }


heading         <-  (atxHeading / setextHeading) blankLine*

atxHeading     <- < "######" / "#####" / "####" / "###" / "##" / "#" >
                   (!endLine !'#'  inline)+ '#'* newLine
                   { fun ({lexeme}, inlines) -> 
                       Heading (String.length lexeme, inlines) }
setextHeading  <- (!endLine inline)+ newLine ("==="  "="* { fun () -> 1 } 
                                             / "---" "-"* { fun () -> 2 }
                                             ) newLine
                  { fun (inlines, level) -> Heading (level, inlines) }

list           <- bulletList / orderedList

bullet         <- nonIndentSpace [+*\-] spaceChar+
bulletList     <- bulletListTight / bulletListLoose
bulletListTight <- (bulletListItem { fun s -> [Markdown s] })+
                   blankLine* !bulletListLoose 
                   { fun s -> BulletList s}
bulletListLoose <- (bulletListItem blankLine*
                     { fun s -> [Markdown (s ^ "\n\n")] })+
                    { fun s -> BulletList s }
bulletListItem  <- !horizontalRule bullet listBlock listContinuationBlock*
                   { fun (s1, s2) -> String.concat "" (s1 :: s2) }

listBlock       <- < anyLine > (!(indent? (bulletListItem / orderedListItem))
                   !blankLine !(indent (bullet / enumerator))
                   optionallyIndentedLine)*
                   { fun (l1, ls) ->
                       String.concat "" (l1.lexeme ::
                                        List.map (fun l -> l.lexeme) ls) }

optionallyIndentedLine <- indent < anyLine >

listContinuationBlock <- (< blankLine+ > {fun {lexeme} -> lexeme } 
                          / { fun () -> "\n" })
                         (indent listBlock)+
                         { fun (bl, lbs) -> String.concat "" (bl :: lbs) }

enumerator      <- nonIndentSpace digit+ '.' spaceChar+
orderedList     <- orderedListTight / orderedListLoose
orderedListTight <- (orderedListItem { fun s -> [Markdown s] })+ blankLine*
                    !orderedListLoose { fun s -> OrderedList s }
orderedListLoose <- ((orderedListItem blankLine*) 
                    { fun s -> [Markdown (s ^ "\n\n")] } )+ 
                    { fun s -> OrderedList s }
orderedListItem  <- enumerator listBlock listContinuationBlock*
                    { fun (l1, ls) -> String.concat "" (l1 :: ls) }

# Lexical syntax

endOfFile       <- !.
newLine         <- '\n' / "\r\n" / '\r'
space           <- [ \t]
sp              <- space*
spnl            <- sp (newLine sp)?
indent          <- '\t' / "    "
nonIndentSpace  <- ("   " / "  " / " ")?
twoStar         <- '**' !'**'
twoUl           <- '__' !'__'
oneStar         <- '*' !'*'
oneUl           <- '_' !'_'

alpha           <- [a-zA-Z]
alphaNum        <- [a-zA-Z0-9]
escapedChar     <- '\\' .
specialChar     <- [*_`&\[\]<!\\]
normalChar      <- escapedChar / !(specialChar / ' ' / newLine) .
endLine         <- ' '? newLine !blankLine !endOfFile { fun () -> Space }
endLine2        <- ' '? newLine !indent !blankLine !endOfFile { fun () -> Space }

entity          <- '&'  < '#' ('x' / 'X') hexDigit+ 
                          / '#' digit+ 
                          / alphaNum+ > ';' { fun {lexeme} -> Entity lexeme }
digit           <- [0-9]
hexDigit        <- [0-9a-fA-F]
spaceChar       <- ' '
