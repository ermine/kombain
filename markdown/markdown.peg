%{
open Kmb_lib
open Markdown_lib
%}

Document        <- ((BlankLine* Block)* BlankLine*) EndOfFile


Block           <- BlockQuote / Verbatim / Reference / HTMLBlock 
                 / Heading / List / HorizontalRule / Para / Plain

BlockQuoteLine  <- NonIndentSpace '>' ' '? < AnyLine > { fun {lexeme} -> lexeme }

BlockQuote      <- (BlockQuoteLine+ (!BlankLine < AnyLine > )* BlankLine*)+
                   { make_blackquote }

Verbatim        <- (!BlankLine IndentedLine)+
                   ((Indent? BlankLine)+ (!BlankLine IndentedLine)+)* BlankLine*
                   { fun (i1, i2) -> 
                       Verbatim (String.concat "" 
                                ((List.concat [i1; List.concat i2]))) }

IndentedLine    <- Indent < AnyLine > { fun {lexeme} -> lexeme }
AnyLine         <- (!NewLine !EndOfFile .)* NewLine?

Reference       <- NonIndentSpace Label ':' SpNl < (!SpaceChar !NewLine .)+ >
                   SpNl Title? BlankLine*
                   { fun (l, ({lexeme}, t)) -> Reference (l, Src (lexeme, t)) }

HorizontalRule  <- NonIndentSpace (('*' Sp '*' Sp '*' (Sp '*')*)
                                 / ('-' Sp '-' Sp '-' (Sp '-')*)
                                 / ('_' Sp '_' Sp '_' (Sp '_')*))
                   NewLine BlankLine+ # the + causes problems at the end of file
                   { fun _ -> HorizontalRule }

Para            <- Inline+ NewLine BlankLine+ { fun inlines -> Para inlines }
Plain           <- Inline+ BlankLine?         { fun inlines -> Plain inlines }

BlankLine       <- Sp NewLine

Inline          <- Strong / Emph / Code / EndLine / Spaces / Link / Image 
                 / AutoLink / RawHTML / Str / Entity / Special 

Spaces          <- SpaceChar+ { fun () -> Space }

Strong           <- (StrongStar / StrongUl)     { fun inlines -> Strong inlines }

StrongStar       <- twoStar !' ' !NewLine (!(SpNl twoStar) Inline)+ twoStar
StrongUl         <- twoUl !' '  !NewLine (!(SpNl twoUl) Inline)+ twoUl !AlphaNum
  
Emph            <- (EmphStar / EmphUl)          { fun inlines -> Emph inlines }
EmphStar        <- oneStar !' ' !NewLine 
                          (Strong / !(SpNl oneStar) Inline)+ oneStar
EmphUl          <- oneUl !' ' !NewLine (Strong / !(SpNl oneUl) Inline)+ oneUl
                    !AlphaNum 

Code            <- Ticks@('`'+) < ((!'`' .)+ / !Ticks '`'+)+ > Ticks 
                   { fun {lexeme} -> Code lexeme }

Str             <- < NormalChar+ >  { fun {lexeme} -> Text lexeme }

Special         <- < SpecialChar >          { fun {lexeme} -> Text lexeme }

Link            <- ExplicitLink / ReferenceLink
Image           <- '!' Link  { fun (Link (x, y)) -> Image (x, y) }
AutoLink        <- AutoLinkURL / AutoLinkEmail

ReferenceLink   <- Label < SpNl > Label 
                   { fun (l1, ({lexeme}, l2)) -> Link (l2, Ref (l2, lexeme)) }
                 / Label  { fun l -> Link (l, Nothing) }

Label           <- '[' (!']' Inline)* ']'
Title           <- ('"' < (!('\"' Sp (")" / NewLine)) !NewLine .)* > '"'
                 / '\'' < (!('\'' Sp (")" / NewLine)) !NewLine .)* > '\'')
                 { fun {lexeme} -> lexeme }

Source          <- ('<' < Source' > '>' / < Source' >) { fun {lexeme} -> lexeme }
Source'         <- ((![()> \n\t] .)+ / "(" Source' ")" / "<" Source' ">")*


SourceAndTitle  <- '(' Sp Source SpNl Title? Sp ')'

ExplicitLink    <- Label SpNl SourceAndTitle
                  { fun (l, (src, title)) -> Link (l, Src (src, title)) }

AutoLinkURL     <- '<' < Alpha+ "://" (!NewLine !'>' .)+ > '>' 
                   { fun {lexeme} -> Link ([Text lexeme], Src (lexeme, None)) }

AutoLinkEmail   <- '<' < Alpha+ "@" (!NewLine !'>' .)+ > '>'
                { fun {lexeme} -> 
                    Link ([Text lexeme], Src (("mailto:" ^ lexeme), None)) }

RawHTML         <- (< htmlComment / htmlTag >)  { fun {lexeme} -> Html lexeme }

htmlComment     <- "<!--" (!"-->" .)* "-->"
htmlTag         <- "<" SpNl "/"? AlphaNum+ SpNl htmlAttribute* "/"? ">"
htmlAttribute   <- AlphaNum+ SpNl ("=" SpNl (Quoted / (!Spaces .)+))? SpNl
Quoted          <- ["] (!'\"' .)* ["] / ['] (!'\'' .)* [']

htmlBlockAny    <- '<' SpNl '/' htmlBlockTag '>'

HTMLBlock       <- < NonIndentSpace (htmlComment / htmlBlockAny) >
                   { fun {lexeme} -> HTMLBlock lexeme }


Heading         <-  (atxHeading / setextHeading) BlankLine*

atxHeading     <- < "######" / "#####" / "####" / "###" / "##" / "#" >
                   (!EndLine !'#'  Inline)+ '#'* NewLine
                   { fun ({lexeme}, inlines) -> 
                       Heading (String.length lexeme, inlines) }
setextHeading  <- (!EndLine Inline)+ NewLine ("==="  "="* { fun () -> 1 } 
                                             / "---" "-"* { fun () -> 2 }
                                             ) NewLine
                  { fun (inlines, level) -> Heading (level, inlines) }

List           <- BulletList / OrderedList

Bullet         <- NonIndentSpace [+*\-] SpaceChar+
BulletList     <- BulletListTight / BulletListLoose
BulletListTight <- (BulletListItem { fun s -> [Markdown s] })+
                   BlankLine* !BulletListLoose 
                   { fun s -> BulletList s}
BulletListLoose <- (BulletListItem BlankLine*
                     { fun s -> [Markdown (s ^ "\n\n")] })+
                    { fun s -> BulletList s }
BulletListItem  <- !HorizontalRule Bullet ListBlock ListContinuationBlock*
                   { fun (s1, s2) -> String.concat "" (s1 :: s2) }

ListBlock       <- < AnyLine > (!(Indent? (BulletListItem / OrderedListItem))
                   !BlankLine !(Indent (Bullet / Enumerator))
                   OptionallyIndentedLine)+
                   { fun (l1, ls) ->
                       String.concat "" (l1.lexeme ::
                                        List.map (fun l -> l.lexeme) ls) }

OptionallyIndentedLine <- Indent < AnyLine >

ListContinuationBlock <- (< BlankLine+ > {fun {lexeme} -> lexeme } 
                          / { fun () -> "\000" })
                         (Indent ListBlock)+
                         { fun (bl, lbs) -> String.concat "" (bl :: lbs) }

Enumerator      <- NonIndentSpace Digit+ '.' SpaceChar+
OrderedList     <- OrderedListTight / OrderedListLoose
OrderedListTight <- (OrderedListItem { fun s -> [Markdown s] })+ BlankLine*
                    !OrderedListLoose { fun s -> OrderedList s }
OrderedListLoose <- ((OrderedListItem BlankLine*) 
                    { fun s -> [Markdown (s ^ "\n\n")] } )+ 
                    { fun s -> OrderedList s }
OrderedListItem  <- Enumerator ListBlock ListContinuationBlock*
                    { fun (l1, ls) -> String.concat "" (l1 :: ls) }

# Lexical syntax

EndOfFile       <- !.
NewLine         <- '\n' / "\r\n" / '\r'
Space           <- [ \t]
Sp              <- Space*
SpNl            <- Sp (NewLine Sp)?
Indent          <- '\t' / "    "
NonIndentSpace  <- ("   " / "  " / " ")?
twoStar         <- '**' !'**'
twoUl           <- '__' !'__'
oneStar         <- '*' !'*'
oneUl           <- '_' !'_'

Alpha           <- [a-zA-Z]
AlphaNum        <- [a-zA-Z0-9]
EscapedChar     <- '\\' .
SpecialChar     <- [*_`&\[\]<!\\]
NormalChar      <- EscapedChar / !(SpecialChar / ' ' / NewLine) .
EndLine         <- ' '? NewLine !BlankLine !EndOfFile { fun () -> Space }
Entity          <- '&'  < '#' ('x' / 'X') hexDigit+ 
                          / '#' Digit+ 
                          / AlphaNum+ > ';' { fun {lexeme} -> Entity lexeme }
Digit           <- [0-9]
hexDigit        <- [0-9a-fA-F]
SpaceChar       <- ' '
