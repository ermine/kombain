# It parsec YAML BNF

%{
open Kmb_input
open Yamlspec_types
open Kmb_grammar

%}

grammar         <- spacing definition+ spacing  endOfFile

definition      <- number func_decl defined_as expressionFun
                   { fun (m, ((n,ps), expr)) -> 
                       (m, ((convert_name n, ps), expr)) }
                 / number name defined_as expression
                   { fun (m, (n, expr)) -> (m, ((convert_name n, []), expr)) }

case_match      <- name l_EQ name   
                   { fun (n1, n2) -> 
                       if n1 = "t" || n1 = "m" then
                         Name ("simple_cmp_ref", [Ident n1; 
                                                   Value ("string", n2)])
                       else
                         Name ("simple_cmp", [Ident n1; 
                                                   Value ("string", n2)]) }
                 / name { fun n -> PredicateAND (Name (convert_name n,[])) }
                 / l_literal

case_bind       <- name l_EQ element 
                   { fun (v, e) -> 
                       match e with
                         | Name (n, []) ->
                           if is_context n then
                             Transform ({start = (0,0); stop=(0,0);
                                     lexeme=Printf.sprintf 
                                        "fun () -> %s := %S" v n}, 
                                     Epsilon)
                           else Name (n, []) 
                         | e -> e }
                 / expression
                   { function
                       | Name (n, []) ->
                          if is_context n then
                            Transform ({start = (0,0); stop=(0,0);
                                      lexeme=Printf.sprintf "fun () -> %S" n}, 
                                      Epsilon)
                          else Name (n, [])
                        | e -> e }  

case            <- case_match l_ARROW case_bind
                   { fun (e1, e2) -> Sequence (e1, e2) }
                 / l_ARROW case_bind

expressionFun  <- case+            { fun (x::xs) -> make_alternates (x, xs) }
                / expression

expression      <- sequence (l_PIPE sequence)*   { make_alternates }

sequence        <- element*             { fun s -> make_sequence (s, None) }

element         <- "/* End of file */" spacing { fun () -> PredicateNOT Any }
                 / "/* Start of line */" spacing { fun () -> Name ("sol", []) }
                 / name " * " var spacing 
                   { fun (s, t) -> 
                       Name ("repeat_ref", [Value ("bool", "true");
                                            Ident t;
                                            Ident (convert_name s)]) }
                 / name " *< " var spacing
                   { fun (s, t) -> 
                        Name ("repeat",  [Value ("bool", "false");
                                              Func ("pred", [Ident t]);
                                              Ident (convert_name s)]) }

                 / name " *=< " var spacing
                   { fun (s, t) -> 
                       Name ("repeat_ref", [Value ("bool", "false");
                                            Ident  t;
                                            Ident (convert_name s)]) }

                 /  name " * " digits spacing 
                   { fun (s, t) -> Name ("repeat", [Value ("bool", "true");
                                                    Value ("int", t);
                                                    Ident (convert_name s)]) }
                 / rejection
                 / primary (l_STAR               { fun () v -> Star v }
                           / l_PLUS              { fun () v -> Plus v }
                           / l_QUESTION          { fun () v -> Opt v }
                           )? spacing
                   { fun (el, repeat) -> 
                       match repeat with None -> el | Some f -> f el }

rejection       <- primary (" - " primary)+ spacing   { make_reject }

primary         <- func { fun (name, ps) -> Name (convert_name name, ps) }
                 / name !l_EQ { fun n -> Name (convert_name n,[]) }
                 / l_OPEN expression l_CLOSE
                 / l_literal
                 / l_class

# Lex

space           <- " "
number          <- space* '[' < [0-9a-z]+ > ']' space*
identifier      <- < [a-zA-Z] ([\-+]? [a-zA-Z0-9])* >

name            <- identifier { fun v -> v.lexeme }

func_decl       <- name l_OPEN name (l_COMMA name)* l_CLOSE
                   { fun (n, (p, ps)) -> (n, p :: ps) }
func            <- name l_OPEN params? l_CLOSE
                   { fun (n, ps) -> match ps with None -> (n, [])
                                                | Some ps -> (n, ps) }
param           <- func  { fun (n, ps) -> Func (convert_name n, ps) }
                 / name 
                   { fun n -> 
                       if n = "n+1" then Func ("succ", [Ident "n"])
                       else if n = "n+m" then Func ("add", [Ident "n";
                                                       Ident "m"])
                       else if n = "n+1+m" then Func ("add", [
                                      Func ("succ", [Ident "n"]); Ident "m"])
                       else if n = "na" ||
                          String.length n = 1 || 
                          is_production n then Ident n
                       else Value ("string", n) }
#                 / digits { fun ds -> Value ("int", ds) }
                  / "-1" { fun () -> Ident "minusodin" }

params          <- param (l_COMMA param)* { fun (v, vs) -> v :: vs }

var             <- < [a-z] > { fun v -> v.lexeme }

l_COMMA           <- "," spacing
defined_as      <- space* "::=" spacing

l_literal       <- ('"""' { fun () -> [Char.code '"'] }
                 / '"\"' { fun () -> [Char.code '\\'] }
                 / ["] (!["] l_char)* ["]
                 / ['] (!['] l_char)* [']
                 / l_hex { fun c -> [c]} )
                  { fun ls -> Literal ls }

l_class         <- "["  (!"]" range)* "]"      { fun cs -> Class cs }
range           <- l_hex '-' l_hex             { fun (c1, c2) -> Range (c1, c2) }
l_hex           <- '#x' < [0-9a-fA-F]+ >       { make_hex_char }
l_char          <- < . >                       { make_char }

l_QUESTION        <- '?' spacing
l_PLUS            <- '+' spacing
l_STAR            <- '*' spacing
l_PIPE            <- '|' spacing
l_OPEN            <- '(' spacing
l_CLOSE           <- ')'

newLine         <- [\r]? [\n]
comment         <- !"/* End of file */" !"/* Start of line */" 
                   "/*" (!"*/" .)* "*/"
spacing         <- (comment / space / newLine)*
endOfFile       <- !.
digits           <- < '-'? [0-9]+ > { fun ds -> ds.lexeme }
l_EQ            <- " = "
l_ARROW        <- spacing "=> "
value          <- < [a-zA-z] [a-zA-Z\-]* > { fun v -> v.lexeme }

