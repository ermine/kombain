%{

open Kmb_input
open Kmb_lib
open Kmb_grammar
open Printf

%}

# Hierarchical syntax

Grammar		<- Spacing Declaration? Definition+ EndOfFile

Declaration  <- '%{' < ( !'%}' .)* > '%}' Spacing       { make_declaration }

Definition   <- Identifier LEFTARROW Expression { make_definition }
              / < . > { fun {start = (line, col)} ->
                          raise (Error (sprintf 
                            "Invalid rule definition at line %d col %d" 
                            line col)) 
                      }

Expression	<- Sequence (SLASH Sequence)*       { make_alternates }

Sequence	<- Item* Action?                      { make_sequence }

Item      <- Identifier AT Suffix               { make_pattern }
           / Prefix

Prefix		<- (AND                               { make_predicate_and }
             / NOT                              { make_predicate_not }
             )? Suffix                          { make_prefix }
                                                

Suffix		<- Primary ( QUESTION 		    { fun _ r -> Opt r }
			               / STAR 			      { fun _ r -> Star r }
			               / PLUS			        { fun _ r -> Plus r }
			               )?                 { fun (p, f) ->
                                            match f with
                                              | None -> p
                                              | Some f -> f p
                                        }

Primary		<- Identifier !LEFTARROW       { make_name }
		       / OPEN Expression CLOSE
           / < OPEN > { unmatched }
           / Literal 
		       / Class 
		       / DOT
		       / LEFTANGLE Expression RIGHTANGLE   { make_tokenizer }
           / < LEFTANGLE >                     { unmatched }


# Lexical syntax

Identifier	<- < IdentStart IdentCont* > Spacing

IdentStart	<- [a-zA-Z_]
IdentCont	  <- IdentStart / [0-9']
Literal		  <- ['] (!['] Char)* ['] Spacing  { make_literal }
             / < ['] > { unmatched }
		         / ["] (!["] Char)* ["] Spacing  { make_literal }
             / < ["] > { unmatched }
Class		    <- '[' (!']' Range)* ']' Spacing   { make_class }
             / < '[' > { unmatched }
Range		    <- Char '-' Char                   { fun (c1, c2) -> Range (c1, c2) }
             / Char < '-' >                    { fun (_, c) -> invalid_char c }
             / Char                            { fun c -> Char c }
             / < . >                           { invalid_char }
Char		    <- '\\' < [nrt'"\[\]\\] >          { make_escaped_char }
		         / '\\' < [0-3][0-7][0-7] >        { make_dec_char }
		         / '\\' < [0-7] [0-7]? >           { make_dec_char }
             / '\\x' < [0-9a-fA-F] [0-9a-fA-F] > { make_hex_char }
             / '\\' '-'                        { fun () -> '-' }
             / < '\\' >                        { invalid_char }
		         /  !'\\' < . >                    { make_char }
LEFTARROW	  <- '<-' Spacing
SLASH		    <- '/' Spacing
AND		      <- '&' Spacing
NOT		      <- '!' Spacing
QUESTION	  <- '?' Spacing
STAR		    <- '*' Spacing
PLUS		    <- '+' Spacing
OPEN		    <- '(' Spacing
CLOSE		    <- ')' Spacing
DOT		      <- '.' Spacing                          { fun () -> Any }
Spacing		  <- (Space / Comment)*
Comment		  <- '#' (!EndOfLine .)* EndOfLine
Space		    <- ' ' / '\t' / EndOfLine
EndOfLine	  <- '\r\n' / '\r' / '\n'
EndOfFile	  <- !.

Action		  <- '{' < (Action' / !'}' .)* >  '}' Spacing
             / < '{' > { unmatched }
Action'     <- '{' (Action' / !'}' .)* '}'
             / < '{' > { unmatched }

LEFTANGLE	  <- '<' Spacing
RIGHTANGLE	<- '>' Spacing
AT          <- '@' Spacing