%{
open Kmb_input
open Kmb_grammar
open Printf
%}

# Hierarchical syntax

grammar		   <- spacing declaration? start_rule? definition+ endOfFile

start_rule   <- "%start " spacing name

declaration  <- '%{' < ( !'%}' .)* > '%}' spacing       { make_declaration }

definition   <- pname l_leftarrow expression
              / name l_leftarrow expression 
                { fun (n, e) -> ((n.lexeme, []), e) }
              / < . > { fun {start = (line, col)} ->
                          raise (Error (sprintf 
                            "Invalid rule definition at line %d col %d" 
                            line col)) 
                      }

expression	<- sequence (l_slash sequence)*       { make_alternates }

sequence	<- item* l_transform?                   { make_sequence }

item      <- ident l_at suffix               { make_pattern }
           / prefix

prefix		<- (l_and                             { make_predicate_and }
             / l_not                             { make_predicate_not }
             )? suffix                          { make_prefix }
                                                

suffix		<- primary ( l_question 		    { fun _ r -> Opt r }
			               / l_star 			      { fun _ r -> Star r }
			               / l_plus			        { fun _ r -> Plus r }
			               )?                 { fun (p, f) ->
                                            match f with
                                              | None -> p
                                              | Some f -> f p
                                        }

primary		<- funct !l_leftarrow         { fun (n, ps) -> Name (n, ps) }
           / name !l_leftarrow          { make_name }
		       / l_OPEN expression l_CLOSE
           / < l_OPEN >                 { unmatched }
           / literal                    { make_literal }
		       / l_class 
		       / l_dot
		       / l_leftangle expression l_rightangle   { make_tokenizer }
           / < l_leftangle >                       { unmatched }


# Lexical syntax

# Copied from OCaml's documentation
ident       <- < (letter / '_') (letter / [0-9_'])* >
name        <- ident !l_OPEN spacing
letter      <- [A-Za-z]

literal		  <- ['] (!['] char)* ['] spacing
             / < ['] > { unmatched }
		         / ["] (!["] char)* ["] spacing 
             / < ["] > { unmatched }
l_class	    <- '[' (!']' range)* ']' spacing   { make_class }
             / < '[' > { unmatched }
range		    <- char '-' char                   { fun (c1, c2) -> Range (c1, c2) }
             / char < '-' >                    { fun (_, c) -> invalid_char c }
             / char                            { fun c -> Char c }
             / < . >                           { invalid_char }
char		    <- '\\' < [nrt'"\[\]\\] >          { make_escaped_char }
		         / '\\' < [0-3][0-7][0-7] >        { make_dec_char }
		         / '\\' < [0-7] [0-7]? >           { make_dec_char }
             / '\\x' < hex+ >                  { make_hex_char }
             / '\\' '-'                        { fun () -> Char.code '-' }
             / < '\\' >                        { invalid_char }
		         /  !'\\' < . >                    { make_char }
hex         <- [0-9a-fA-F]
l_leftarrow	<- '<-' spacing
l_slash	    <- '/' spacing
l_and	      <- '&' spacing
l_not	      <- '!' spacing
l_question	  <- '?' spacing
l_star		    <- '*' spacing
l_plus		    <- '+' spacing
l_OPEN		    <- '(' spacing
l_CLOSE		  <- ')' spacing
l_dot		    <- '.' spacing                          { fun () -> Any }
spacing		  <- (space / comment)*
comment		  <- '#' (!endOfLine .)* endOfLine
space		    <- ' ' / '\t' / endOfLine
endOfLine	  <- '\r\n' / '\r' / '\n'
endOfFile	  <- !.

l_transform		  <- '{' < (l_transform' / !'}' .)* >  '}' spacing
               / < '{' > { unmatched }
l_transform'    <- '{' (l_transform' / !'}' .)* '}'
               / < '{' > { unmatched }

l_leftangle	  <- '<' spacing
l_rightangle	<- '>' spacing
l_at          <- '@' spacing
l_comma       <- "," spacing

pname         <- ident l_OPEN param (l_COMMA param)* l_CLOSE
                 { fun (name, (p, ps)) -> (name.lexeme, (p :: ps)) }
l_COMMA           <- ',' spacing
param         <- ident { fun i -> i.lexeme }

funct         <- ident l_OPEN fparam (l_COMMA fparam)* l_CLOSE
                 { fun (n, (p, ps)) -> (n.lexeme, (p::ps)) }
               / ident l_OPEN l_CLOSE
                 { fun n -> (n.lexeme, []) }
fparam        <- funct { fun (n,ps) -> Func (n, ps) }
               / ident { fun {lexeme} ->
                           if lexeme = "true" || lexeme = "false" then
                             Value ("bool", lexeme)
                           else
                             Ident lexeme }
               / < '-'? [0-9]+ > { fun ds -> Value ("int", ds.lexeme) }
               / literal { fun cs -> Value ("string", string_of_literal cs) }